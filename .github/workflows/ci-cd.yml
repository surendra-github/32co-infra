name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - '.github/workflows/**'
      - 'infra/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - '.github/workflows/**'
      - 'infra/**'

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: "32co"
  ENVIRONMENT: "prod"
  PYTHON_VERSION: '3.9'

permissions:
  contents: read
  security-events: write

jobs:
  # Terraform validation job
  terraform-check:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Format Check
      working-directory: ./infra
      run: terraform fmt -check -recursive
    
    - name: Terraform Init
      run: |
        # terraform init

    - name: Terraform Plan
      run: |
        # terraform plan -var-file=environments/dev/terraform.tfvars

    - name: Terraform Apply
      run: |
        # terraform apply -var-file=environments/dev/terraform.tfvars --auto-approve

  # Application testing job
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'app/requirements.txt'

    - name: Install dependencies
      working-directory: ./app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 bandit safety

    - name: Lint with flake8
      working-directory: ./app
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with coverage
      working-directory: ./app
      env:
        PYTHONPATH: .
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./app/coverage.xml
        flags: unittests
        fail_ci_if_error: false

  # Security scanning job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Run Bandit security scan
      working-directory: ./app
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt

    - name: Check dependencies with Safety
      working-directory: ./app
      run: |
        safety check --json > safety-report.json || true
        safety check || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          ./app/bandit-report.json
          ./app/safety-report.json

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './app'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-results.sarif

  # Build and deploy job
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, security-scan, terraform-check]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-webapp
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd app
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output the image URL
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download current task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-app \
          --query taskDefinition > task-definition.json

    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: app
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-service
        cluster: ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-cluster
        wait-for-service-stability: true

    - name: Create CodeDeploy deployment
      if: ${{ env.ENABLE_BLUE_GREEN == 'true' }}
      run: |
        # Create deployment specification
        cat > appspec.yaml << EOF
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: "${{ steps.task-def.outputs.task-definition-arn }}"
                LoadBalancerInfo:
                  ContainerName: "app"
                  ContainerPort: ${{ env.APP_PORT }}
        EOF
        
        # Create deployment
        aws deploy create-deployment \
          --application-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-app \
          --deployment-group-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-dg \
          --revision '{"revisionType": "AppSpecContent", "appSpecContent": {"content": "'$(cat appspec.yaml | base64 -w 0)'"}}' \
          --deployment-config-name CodeDeployDefault.ECSAllAtOnceBlueGreen \
          --description "Deployment of commit ${{ github.sha }}"


        - name: Verify deployment
          run: |
            # Wait a bit for the service to stabilize
            sleep 30
            
            # Get the ALB DNS name
            ALB_DNS=$(aws elbv2 describe-load-balancers \
              --names "${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-alb" \
              --query 'LoadBalancers[0].DNSName' \
              --output text)
            
            # Check health endpoint
            curl -f http://$ALB_DNS/health || exit 1
            echo "Deployment verification successful!"

        # - name: Notify deployment status
        #   if: always()
        #   uses: 8398a7/action-slack-notify@v3
        #   with:
        #     status: ${{ job.status }}
        #     text: |
        #       Deployment Status: ${{ job.status }}
        #       Environment: ${{ env.ENVIRONMENT }}
        #       Commit: ${{ github.sha }}
        #       Author: ${{ github.actor }}
        #   env:
        #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Separate job for development deployment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push to development
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-dev-webapp
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest-dev .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest-dev

    - name: Update development ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ env.PROJECT_NAME }}-dev-cluster \
          --service ${{ env.PROJECT_NAME }}-dev-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}